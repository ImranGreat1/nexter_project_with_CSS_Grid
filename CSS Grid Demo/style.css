.container {
    background-color: #e1e1e1;
    width: 90%;
    margin: 30px auto;

    /* Defining grid layout */
    display: grid;
    grid-template-rows: 150px 150px 150px;
    /* grid-template-columns: 150px 150px 150px; */

    
    /* This will provide three columns with 150px each*/
    grid-template-columns: repeat(3, 150px);
    

    /* Using Fractional unit (fr) introduced together with grid
   layout */

    /* this will provide 2 150px and the last column will take
    rest of the remaining space*/
    grid-template-columns: repeat(2, 150px) 1fr;


    /* Below will provide three equal columns that occupy the
    gird container, the space of the grid container will be divided
    into 3, one for each column*/
    grid-template-columns: repeat(3, 1fr);


    /* We can also use percentages. Percentage units do not take
    gaps into consideration.Here, it will basically occupy the whole
    50% of the container and the other 2 columns will divide the
    remaining space after the gaps have been deducted*/
    grid-template-columns: 50% repeat(2, 1fr);

    /* The current columns I'm using */
    grid-template-columns: repeat(3, 1fr);


    /* We can also use fractional unit on grid-template-rows if we
    define the height of the container. The below code will make
    two rows that occupy half available height of the container for
    each of them */
    /* grid-template-rows: repeat(2, 1fr); */


    /* Grid gap: spaces betweem rows or columns */
    /* grid-column-gap: 30px; */
    /* grid-row-gap: 40px; */
    /* specify gap for both rows and columns */
    /* grid-gap: 30px; */

    /* The above three properties for setting gaps is obsolete
    we now use the below properties*/
    column-gap: 30px;
    row-gap: 40px;
    gap: 30px;   /*For both rows and columns*/


}

.item {
    padding: 20px;
    font-size: 20px;
    text-align: center;
    color: #fff;
    font-family: sans-serif;

    text-align: center;
}


.item--1 {
    background-color: orangered;

    /* Ordering grid items */
    /*
    grid-row-start: 2;
    grid-row-end: 3;
    grid-column-start: 2;
    grid-column-end: 3;
    */
    /* SHORTHAND */
    grid-row: 2 / 3;
    grid-column: 2 / 3;
}

.item--2 {
    background-color: yellowgreen;
}

.item--3 {
    background-color: blueviolet;
}

.item--4 {
    background-color: palevioletred;
}

.item--5 {
    background-color: royalblue;

    /* Ordering */
    grid-row: 1 / 2;
    grid-column: 3 / 4;

    /* SHORTER way by a bit confusing */
    grid-area: 1 / 3 / 2 / 4;
}

.item--6 {
    background-color: goldenrod;
    grid-row: 1 / 2;
    grid-column: 2 / 3;
}


/* Extending more than one clomun or row */
.item--4 {
    /* to start from first row and span across 2 rows */
    grid-row: 1 / span 2;

    /* this will do the same as the above  */
    grid-row: 1 /  3;

    /* To span an element from a starting row/column to the
    end of that row or column we use -1 as the end column/row  */
    grid-row: 1 / -1;
}

/* 
    When there is no more space to fit the grid items on the rows
    and columns we define, the grid container will automatically
    a new row/column, that new row/column is what is then called
    an implicit grid.

    When we specify that a grid cell should span over more than one
    column/row, if the column/row that is spanning over has it grid
    row and column implicitly specify then one cell will be on top
    of another, yea it does happen that way. We can use z-index to
    display the content we want on top. If the cell does not have
    it grid column/row specify, then the spanning element will push
    it to the next row/column.
*/